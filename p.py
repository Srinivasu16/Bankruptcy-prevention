{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "c11ec9bf-6da0-408c-a867-4745dc058a37",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\srini\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator LogisticRegression from version 1.6.1 when using version 1.5.1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:\n",
      "https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations\n",
      "  warnings.warn(\n",
      "C:\\Users\\srini\\anaconda3\\Lib\\site-packages\\sklearn\\base.py:376: InconsistentVersionWarning: Trying to unpickle estimator StandardScaler from version 1.6.1 when using version 1.5.1. This might lead to breaking code or invalid results. Use at your own risk. For more info please refer to:\n",
      "https://scikit-learn.org/stable/model_persistence.html#security-maintainability-limitations\n",
      "  warnings.warn(\n"
     ]
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import pickle\n",
    "import joblib\n",
    "import plotly.graph_objects as go\n",
    "\n",
    "# Load model, scaler, and column names\n",
    "@st.cache_resource\n",
    "def load_components():\n",
    "    try:\n",
    "        model = pickle.load(open('logistic_regression.pkl', 'rb'))\n",
    "        scaler = joblib.load(open('scaler.pkl', 'rb'))\n",
    "        columns = joblib.load(open('columns.pkl', 'rb'))\n",
    "        return model, scaler, columns\n",
    "    except FileNotFoundError as e:\n",
    "        st.error(f\"‚ùå Error loading model files: {e}\")\n",
    "        st.stop()\n",
    "\n",
    "model, scaler, columns = load_components()\n",
    "\n",
    "# Ensure columns are properly stripped\n",
    "columns = [col.strip() for col in columns]\n",
    "\n",
    "# App title\n",
    "st.set_page_config(page_title=\"Bankruptcy Prediction\", page_icon=\"üè¶\")\n",
    "st.title(\"üè¶ Bankruptcy Prediction App\")\n",
    "st.markdown(\"Predict the risk of bankruptcy using financial and operational risk factors.\")\n",
    "\n",
    "# Sidebar for inputs\n",
    "st.sidebar.header(\"Input Risk Parameters\")\n",
    "\n",
    "industrial_risk = st.sidebar.selectbox(\"Industrial Risk\", [0.0, 0.5, 1.0], help=\"0 = Low, 0.5 = Medium, 1 = High\")\n",
    "management_risk = st.sidebar.selectbox(\"Management Risk\", [0.0, 0.5, 1.0], help=\"0 = Low, 0.5 = Medium, 1 = High\")\n",
    "financial_flexibility = st.sidebar.selectbox(\"Financial Flexibility\", [0.0, 0.5, 1.0], help=\"0 = Low, 0.5 = Medium, 1 = High\")\n",
    "credibility = st.sidebar.selectbox(\"Credibility\", [0.0, 0.5, 1.0], help=\"0 = Low, 0.5 = Medium, 1 = High\")\n",
    "competitiveness = st.sidebar.selectbox(\"Competitiveness\", [0.0, 0.5, 1.0], help=\"0 = Low, 0.5 = Medium, 1 = High\")\n",
    "operating_risk = st.sidebar.selectbox(\"Operating Risk\", [0.0, 0.5, 1.0], help=\"0 = Low, 0.5 = Medium, 1 = High\")\n",
    "\n",
    "# Predict button\n",
    "if st.sidebar.button(\"üîç Predict Bankruptcy Risk\"):\n",
    "\n",
    "    # Prepare input DataFrame\n",
    "    input_data = pd.DataFrame([{\n",
    "        'industrial_risk': industrial_risk,\n",
    "        'management_risk': management_risk,\n",
    "        'financial_flexibility': financial_flexibility,\n",
    "        'credibility': credibility,\n",
    "        'competitiveness': competitiveness,\n",
    "        'operating_risk': operating_risk\n",
    "    }])\n",
    "\n",
    "    # Align column order with trained model\n",
    "    input_data.columns = input_data.columns.str.strip()\n",
    "\n",
    "    try:\n",
    "        input_data = input_data[columns]\n",
    "    except KeyError as e:\n",
    "        st.error(f\"‚ùå Column mismatch: {e}\")\n",
    "        st.stop()\n",
    "\n",
    "    # Scale input\n",
    "    input_scaled = scaler.transform(input_data)\n",
    "\n",
    "    # Make prediction\n",
    "    prediction = model.predict(input_scaled)[0]\n",
    "    prediction_proba = model.predict_proba(input_scaled)[0]\n",
    "\n",
    "    # Results\n",
    "    st.subheader(\"üìä Prediction Result\")\n",
    "    risk_score = round(prediction_proba[1] * 100, 2)\n",
    "    non_risk_score = round(prediction_proba[0] * 100, 2)\n",
    "\n",
    "    if prediction == 1:\n",
    "        st.error(f\"üö® High Bankruptcy Risk ({risk_score}%)\")\n",
    "    else:\n",
    "        st.success(f\"‚úÖ Low Bankruptcy Risk ({non_risk_score}%)\")\n",
    "\n",
    "    # Gauge chart\n",
    "    fig = go.Figure(go.Indicator(\n",
    "        mode=\"gauge+number\",\n",
    "        value=risk_score,\n",
    "        title={'text': \"Bankruptcy Risk (%)\"},\n",
    "        gauge={\n",
    "            'axis': {'range': [0, 100]},\n",
    "            'bar': {'color': \"red\"},\n",
    "            'steps': [\n",
    "                {'range': [0, 30], 'color': \"lightgreen\"},\n",
    "                {'range': [30, 70], 'color': \"orange\"},\n",
    "                {'range': [70, 100], 'color': \"red\"}\n",
    "            ]\n",
    "        }\n",
    "    ))\n",
    "    st.plotly_chart(fig)\n",
    "\n",
    "    # Input summary\n",
    "    st.subheader(\"üìã Input Summary\")\n",
    "    feature_display = pd.DataFrame([{\n",
    "        'Industrial Risk': industrial_risk,\n",
    "        'Management Risk': management_risk,\n",
    "        'Financial Flexibility': financial_flexibility,\n",
    "        'Credibility': credibility,\n",
    "        'Competitiveness': competitiveness,\n",
    "        'Operating Risk': operating_risk\n",
    "    }])\n",
    "    st.dataframe(feature_display)\n",
    "\n",
    "    # Download button\n",
    "    result = {\n",
    "        \"Bankruptcy Risk (%)\": risk_score,\n",
    "        \"Non-Bankruptcy (%)\": non_risk_score\n",
    "    }\n",
    "    result_df = pd.DataFrame([result])\n",
    "\n",
    "    st.download_button(\n",
    "        label=\"üì• Download Result as CSV\",\n",
    "        data=result_df.to_csv(index=False),\n",
    "        file_name='bankruptcy_risk_result.csv',\n",
    "        mime='text/csv'\n",
    "    )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": None,
   "id": "4ffa5a4e-b2b6-424d-a34f-d4c4eeb74127",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
